
# Energia C2000 Core and platform.
# ------------------------------
#
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5-3rd-party-Hardware-specification

name=Energia C2000 boards
version=1.0.0

# C2000 compile variables
# ----------------------

compiler.warning_flags=--display_error_number --diag_suppress=10063 --diag_warning=225 --diag_wrap=off
compiler.warning_flags.none=--no_warnings --diag_wrap=off
compiler.warning_flags.default=--display_error_number --diag_suppress=10063 --diag_warning=225 --diag_wrap=off
compiler.warning_flags.more=--display_error_number --diag_warning=225 --diag_wrap=off
compiler.warning_flags.all=--display_error_number --verbose_diagnostics --diag_warning=225 --diag_wrap=off

compiler.path={runtime.tools.ti-cgt-c2000.path}/bin/
compiler.c.cmd=cl2000
compiler.c.flags=-g -v28 -ml -mt -O2 --preproc_dependency={object_file}.d --preproc_with_compile --gen_func_subsections=on {compiler.warning_flags.default}
compiler.cpp.elf.cmd=cl2000
compiler.c.elf.flags=-v28 -ml -mt -g --define={build.mcu} --diag_warning=225 --diag_wrap=off --display_error_number -z
compiler.S.cmd=cl2000
compiler.S.flags=-g -v28 --asm_extension=S -ml -mt  --preproc_dependency={object_file}.d --preproc_with_compile --gen_func_subsections=on
compiler.cpp.cmd=cl2000
compiler.cpp.flags=-g -v28 -ml -mt -O2  --preproc_dependency={object_file}.d --preproc_with_compile --gen_func_subsections=on {compiler.warning_flags.default}
compiler.ar.cmd=ar2000
compiler.ar.flags=r
compiler.objcopy.cmd=
compiler.objcopy.eep.flags=
compiler.elf2hex.flags=
compiler.elf2hex.cmd=
compiler.ldflags= 
compiler.size.cmd=
compiler.define=

# this can be overriden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags="-I{runtime.tools.ti-cgt-c2000.path}/include" -I {build.core.path}/F2837xS_common/include
compiler.c.elf.extra_flags=-i/opt/energia/ti-cgt-c2000_17.6.0.STS/lib -i{build.path}/core/ --reread_libs --diag_wrap=off --display_error_number --reread_libs --stack_size=0x300 --rom_model --entry_point=code_start
compiler.cpp.extra_flags="-I{runtime.tools.ti-cgt-c2000.path}/include"
compiler.S.extra_flags="-I{runtime.tools.ti-cgt-c2000.path}/include"
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

# USB Flags
# ---------
build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'

# Default usb manufacturer will be replaced at compile time using
# numeric vendor ID if available or by board's specific value.
build.usb_manufacturer="Unknown"


# SAM3 compile patterns
# ---------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} --define=F_CPU={build.f_cpu} --define=ARDUINO={runtime.ide.version} --define=ENERGIA={runtime.ide.version} --define={build.mcu} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" --output_file={object_file}

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} --define=F_CPU={build.f_cpu} --define=ARDUINO={runtime.ide.version} --define=ENERGIA={runtime.ide.version} --define={build.mcu} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" --output_file={object_file}

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} --define=F_CPU={build.f_cpu} --define=ARDUINO={runtime.ide.version} --define=ENERGIA={runtime.ide.version} --define={build.mcu} {compiler.S.extra_flags} {build.extra_flags} {includes} "{source_file}" --output_file={object_file}

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects

recipe.c.combine.pattern="{compiler.path}{compiler.cpp.elf.cmd}" {compiler.c.elf.flags} -o "{build.path}/{build.project_name}.elf" -i"{build.path}" {compiler.c.elf.extra_flags} {object_files} {build.ldscript} -l{build.rts} -lcore.a -llibc.a

## Create output (.bin file)
#recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Save hex
recipe.output.tmp_file={build.project_name}.hex
recipe.output.save_file={build.project_name}.{build.variant}.hex

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*

## Preprocessor
preproc.includes.flags=
preproc.macros.flags=

recipe.preproc.includes="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {preproc.includes.flags} --define={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DENERGIA={runtime.ide.version} -DENERGIA_{build.board} -DENERGIA_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}"
recipe.preproc.macros="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {preproc.macros.flags} --define={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DENERGIA={runtime.ide.version} -DENERGIA_{build.board} -DENERGIA_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}"  --output_file "{preprocessed_file_path}"


# TI's DSLite
tools.dslite.upload.params.verbose=
tools.dslite.upload.params.quiet=
tools.dslite.path={runtime.tools.dslite.path}
tools.dslite.config.path={path}
tools.dslite.cmd.path={path}/DebugServer/bin/DSLite
tools.dslite.upload.pattern={cmd.path} {upload.verbose} load "{config.path}/{build.variant}.ccxml" "{build.path}/{build.project_name}.elf"

